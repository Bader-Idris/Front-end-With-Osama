body{
  background-color: silver;
  margin: 0%;
  min-height: 5000px;
}
#shitty{

  background-color: red;
  padding: 10px;
  /* overflow: hidden; */
  /* We made this choice for fixing the problem of padding up there,
  Another way to fix it when adding text is to specify the height, but it has its bugs
    Why overflow here is a bad solution?  because it's blocking any [drop down] or [pop-up minue] that comes in same div 
        CSS has a better solution. Clear, we add a P and in css we add S{clear:both;}
*/
}

#shitty div{
    padding-top: 10px;
    padding-bottom: 10px;
    text-align: center;
    background-color: #eee;
    width: 25%;
    float:left;
    
}
/*27th lesson [THE REAL STUDDING BEGAN]
  Float and Clear
    Before they were using float too much, but now Grand things appeared,
        thus we're compiled to know its essentialsüòí and we might use it
    when we made the float to left it started counting 1=>2, if Right then it's 1<=2
*/
.clear{
  clear: both;
}
/* Here we just got a glance on float and clear, therefore we'll see more complex lessons about them, with calculation;
     lesson finished at 03:02:34 */

/*28h lesson 
  Master the CSS calculation
      In real world we add [ŸáŸàÿßŸÖÿ¥/margins/spaces] between columns
          we calculate them previously
                Content width: 100%
                5 spaces 1% * 5 => 5% Of Content width
                Empty space 95%
                4 Elements 95% /4 [Extremely important here]
          calc() function does the same with less coding
            when using PXs we sum this[6 spaces [15px] * 5 => 90px Of Content width]
            Empty space 100% - 90px
            5 Elements (100%- 90px) /5
            we change margin-left to PXs [though]15px or 10px

*/
.twenty-eight div{
  padding-top: 10px;
  padding-bottom: 10px;
  text-align: center;
  background-color: #eee;
  width: calc(95%/4);        /*we used calc() function instead of this width: 23.75%; */
  float:left;
  margin-left:1%;/* here we add the one percent*/
}

/*29th lesson
    Opacity
      To change the transparency of whole content we use [opacity]:1; or its fractions
      why do we use it? 
        well, it's importantly useful for Modal alias as pop-ups, check here for more info
        [https://getbootstrap.com/docs/5.2/components/modal/] 

*30th lesson 03:15:00 [One of the greatest attributes in CSS]
    Position
      1st type: Static position, it's default [position:static;]
      2nd type: position:relative; [it's great, its moves relate with original place \ left:10px; ]
      3rd type: position: absolute;[ÿßŸÑŸÖÿ∑ŸÑŸÇ]it goes out of its place[workflow] to emplace other div for instance,
        but 2nd div moves with it, it moves with its parent/ŸÖŸàÿ±ÿ´ BUT EXTREMELY IMPORTANT TO MAKE PARENT'S POSITION:relative
      4th type:Fixed: it moves by the page not its parent, most used as fixed button

      5th type: position:sticky; It's similar to fixed but it moves until we scroll its place
          write this to apply it: div{position:sticky; top:0;/or 10px}
      most used in navigation bars
*/
footer{
  background-color: rgb(61, 64, 64);
  padding: 5px 10px 5px 0px;
  position: fixed;
  bottom: 0%;
  width: 100%;
  min-height: 0vw;
  margin-bottom: 0rem;
  
}
footer div{
  padding-top: 10px;
  padding-bottom: 10px;
  text-align: center;
  background-color: #eee;
  width: calc(94%/3);
  float:left;
  margin-left:1%;
  position:sticky; 
  top:0;
  bottom: 2px;
  margin-bottom: 5px;
  
}
/* It did't work with me well,With some further actions required */

/*31st lesson
    Z-Index[layers]
        when we have many layers CSS list them from bottom to top, by default [1st-2nd-3rd]
        z-index: 4;//means that every elements before 4 will be under this one[we did it after making position:absolute]
          If we add same value for two elements it'll count the last in order
    Position is mandatory for z-index
    we use z-index for modals etc, if as last one we add -1 

*/
/*32nd lesson 
    Lists Styling
        list-style-type has many values, as square, disc,upper-roman[I, 1, A], Osama has many more, why?!
      when learning ::after and ::before we'll make our own icon styles
      Osama uses [https://fontawesome.com/] for bringing them
    list-style-position:outside; It's default is outside, so dots will be out of the unordered list
      so we say list-style-position: inside;
        We'll not use this as we mentioned
    list-style-image: url(); here we bring a picture instead of symbols
    
    Shorthand of the property: list-style: type position image;[Not useful, Osama said]
      use this: [list-style:none]; to work better with before & after
    
    Ul has margin and padding-left
    so to reset them we write: list-style: none; padding-left:0; margin:0;

    Why to use it then?
      To add links in navigation bars inside unordered lists

*/
.list-unstyled{
  list-style-type:none;
  padding-left: 0%;
  margin: 0;

}
hr{
  background-color: rgba(32, 191, 133, 0.662);
  height: 3px;
}
/*33rd lesson
    Table Styling 3:38:##
    table border-spacing, width
    td padding, background-color, 
    table thead color, background-color, font-weight, text-align, border-color
*/
table{
  width: 100%;
  border-spacing: 1.5px;
  font-family: Arial, Helvetica, sans-serif;
}
table td{
  padding: 0.8rem;
  background-color:#0c4a26;
  font-family: inherit;
}
table thead td{
  background-color: #3a3e7a;
  color: white;
  font-weight: bold;
  text-align: center;
  border-color: #2c6443;
}

/*34th lesson
    Pseudo classes 3:45 h [EXTREMELY IMPORTANT]
      [Pseudo means fake/ŸÖÿ≤ŸäŸÅ] as pseudo science, it's the feature that have ::after ::before  
        we use it with hovers and many dozens of things e.g: ‚¨áÔ∏è
        Hovercraft means [ÿ≠ŸàÿßŸÖÿ©]
    We wanna change label's checkbox color changes after marking it
      so we give its input a class then here we write: .ch:checked + label{color:red;} 
      we can add text-decoration:line-through
          [a + b {}] we'll learn more about it in the future
    a:visited is when you click on it see downwards 
      a:link is for unvisited links
    [:empty 10px solid red;] here we see what are the empty elements 
      when we add a text input with a border: 1px solid black and class it with [in], we can add 
      .in:focus{ border-color: red; outline: none;}
  we'll use more pseudo when learn selectors

*/
a{
  text-decoration: none;
  color: rgb(16, 11, 164);
  padding-left:20px;
  margin-left:40px ;
}
a:hover{
  color: rgb(144, 20, 166);
}
.ch:checked + label{
  color: red;
}
/* 
.ch:hover + label{
  color: rgb(37, 213, 13);
  text-decoration: overline;
  font-weight: bold;
} 
Little playing by me niggers
*/
a:visited{
  color: #be7df8;
}
/*
    to focus the work on one statement as focus/visited, we open [Inspect] then [right click] on div or whichever then
      [force state focus/hover whatever]
*/
/*35th lesson
    Pseudo Elements
      First letter, First line
          old fashion: to change the first letter's size we add it into a span then make it display:inline-block;
          then we change its font-size and font weight 
          but we might not be capable to change HTML 
    Correct method: .class::first-letter{font-size: 60px;font-weight: bold; }

*/
.nigger::first-letter{/* if we add one only colon it works,
  therefore it's been two for distinguishing it as pseudo element to previous pseudo class */
  display: inline-block;
  background-color: red;
  color: white;
  font-size: 60px;
  font-weight: bold;
}
.f-line::first-line{/*Here we added a first line change, if we wanna do it by coding it'll be difficult*/
  color: rgb(42, 40, 40);
  background-color: #fdfaff;
}
/*
    Some websites even changes selected lines, as a change in identity, instead of blue color
    so to do this: [::selection] if for specific div we add its name before colons 
*/
::selection{
  color:yellow;
  border: .5px solid orange;
  background-color: black;
}

/*36th lesson THE MOST IMPORTANT PSEUDO element
    pseudo elements: Before, After, Content 
      Presume we have a paragraph, our task is to add a vertical line on its left side
      in normal situation we add a span and give it a class, and we make p inline-block, then we change its properties
      such as: p{position: relative;} for p, and for span these: 
          p .pipeline{position: absolute;width:5px;height:100%;right:-10px;top:0;background-color:#2c6443;}
      
  BUT we can't use html, so pseudo is here! 
    p::after{content:""; this content is extremely important 
      display: inline-block;
      position:absolute;
      width:5px;
    }
  
*/
.one{
  background-color: #fdfaff;
  padding: 10px;
  width: 600px;
  float: left;
  position: relative;
  margin-left: 30px;
}
.one::after{
  content: "";/*This content is extremely important, so we'll learn it*/
  position:absolute;
  width:5px;
  height:100%;
  right:-10px;
  top:0;
  background-color:#2c6443;
}
.one::before{
  content: "";
  width:0;
  height:0;
  /* background-color:#ffffff; to make the arrow transparent we remove this bg color*/
  position:absolute;
  left: -20px;
  top:50%;
  margin-top: -10px;
  border-width: 10px;
  border-style: solid;
  border-color: transparent #2c6443 transparent transparent;/* Here we made the Arrow by this action*/
}
/*37th lesson 4:14:30 last instructional pseudo lesson
    Pseudo Elements
      Content & trainings
  counter-increment: your-text-here;
  we added it into parent as div, then in ::after or ::before 
    we add this content: "counter(same-parent-counter-name)";
    [to count numbers, it didn't work with me! after an hour]
    content:attr(html attribute here, which comes inside elements blue color)
      we can use it as a tooltip with i symbol, [.class:hover::before{}] 
          we can add content:url(video/audio/imgs/links);but it's not preferred

*/
.parent{
  display: inline-block;
  counter-increment: my-counter;
  overflow: hidden;
}

.my-counter{
  content: "";
  background-color: #fdfaff;
  padding: 10px;
  width: 600px;
  float: left;
  position: relative;
  margin-left: 30px;
  margin-top: 20px;
  
  margin-bottom: 20px;
}
.my-counter::after{
  content: "counter(my-counter)";
  position: absolute;
  background-color: red;
  color: wheat;
  width: 20px;
  height: 20px;
  text-align: center;
  font-weight: bold;
  right: -10px;
  top:50%;
  margin-top: -10px;
}